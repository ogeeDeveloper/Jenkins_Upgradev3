pipeline {
    agent none  // No default agent; specify agents at stage level

    environment {
        VERSION = '0.1.0'
        RELEASE_VERSION = 'R.2'
        SONAR_HOST_URL = 'http://sonarqube:9000'  // Using Docker service name as hostname
    }

    stages {
        stage('Prepare') {
            agent { label 'docker-capable' }
            steps {
                checkout scm
            }
        }

        stage('Audit Tools') {
            agent { label 'docker-capable' }
            steps {
                sh '''
                    java -version
                    mvn -version
                '''
                sh 'printenv'
                sh 'ls -l $WORKSPACE'
            }
        }

        stage('Unit Test') {
            agent { label 'docker-capable' }
            steps {
                dir('./java-tomcat-sample') {
                    sh 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
               agent { label 'docker-capable' }
               steps {
                   script {
                       withSonarQubeEnv('SonarQube_Server') {
                           sh "mvn clean verify sonar:sonar"
                       }
                   }
               }
           }

        stage('Build and Package') {
            agent { label 'docker-capable' }
            steps {
                sh 'mvn -f java-tomcat-sample/pom.xml clean package'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            deleteDir()
        }
    }
}
