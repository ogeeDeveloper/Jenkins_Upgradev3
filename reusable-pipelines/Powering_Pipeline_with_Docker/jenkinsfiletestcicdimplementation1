pipeline {
    agent { label 'slave01' }

    environment {
        VERSION = '0.1.0'
        RELEASE_VERSION = 'R.2'
        LOCAL_REGISTRY = 'localhost:5000'
        DOCKER_IMAGE = "${LOCAL_REGISTRY}/your-app:${VERSION}"
    }

    stages {
        stage('Audit Tools') {
            steps {
                sh '''
                    java -version
                    mvn -version
                '''
                sh 'printenv'
                sh 'ls -l $WORKSPACE'
            }
        }

        stage('Unit Test') {
            steps {
                dir('./java-tomcat-sample') { // Adjust the path if needed to match your project structure
                    sh '''
                        echo "Executing Unit Tests..."
                        mvn test
                    '''
                }
            }
        }

        stage('Security Scan') {
            steps {
                sh '''
                    echo "Running Security Scans..."
                    # Assuming SonarQube commands or similar would be added here
                '''
            }
        }

        stage('Build') {
            steps {
                echo "Building version: ${VERSION} with suffix: ${RELEASE_VERSION}"
                sh 'mvn -f java-tomcat-sample/pom.xml clean package' // Ensure this path is correct
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    // Ensuring we are in the right directory where the Dockerfile and context are located
                    dir('jenkins-slave') {
                        sh "docker build -t ${DOCKER_IMAGE} ." // Correctly set to build Docker image from current directory
                        sh "docker push ${DOCKER_IMAGE}" // Push the built Docker image to the registry
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh '''
                        echo "Deploying Docker container..."
                        docker rm -f your-app || true
                        docker run -d --name your-app -p 8080:8080 ${DOCKER_IMAGE}
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            deleteDir() // Clean up our workspace after the build is complete
        }
    }
}
