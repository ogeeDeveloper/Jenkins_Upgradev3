pipeline {
    agent none  // No global agent

    environment {
        VERSION = '0.1.0'
        RELEASE_VERSION = 'R.2'
    }

    stages {
        stage('Prepare') {
            agent { label 'docker-capable' }
            steps {
                checkout scm
            }
        }

        stage('Audit Tools') {
            agent { label 'docker-capable' }
            steps {
                script {
                    docker.image('maven:latest').inside('-u root -v /home/jenkins/workspace/JenkinsTestPipeline1:/home/jenkins/workspace/JenkinsTestPipeline1') {
                        sh '''
                            java -version
                            mvn -version
                        '''
                        sh 'printenv'
                        sh 'ls -l $WORKSPACE'
                    }
                }
            }
        }

        stage('Unit Test') {
            agent { label 'docker-capable' }
            steps {
                script {
                    docker.image('maven:latest').inside('-u root -v /home/jenkins/workspace/JenkinsTestPipeline1:/home/jenkins/workspace/JenkinsTestPipeline1') {
                        dir('./java-tomcat-sample') {
                            sh 'mvn test'
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            agent { label 'docker-capable' }
            steps {
                script {
                    docker.image('maven:latest').inside('-u root -v /home/jenkins/workspace/JenkinsTestPipeline1:/home/jenkins/workspace/JenkinsTestPipeline1') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage('Build and Package') {
            agent { label 'docker-capable' }
            steps {
                script {
                    docker.image('maven:latest').inside('-u root -v /home/jenkins/workspace/JenkinsTestPipeline1:/home/jenkins/workspace/JenkinsTestPipeline1') {
                        sh 'mvn -f java-tomcat-sample/pom.xml clean package'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            deleteDir()
        }
    }
}
