pipeline {
    agent none  // No default agent; specify agents at stage level

    environment {
        VERSION = '0.1.0'
        RELEASE_VERSION = 'R.2'
        SONAR_HOST_URL = 'http://sonarqube:9000'  // Using Docker service name as hostname
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk' // Ensure this path is correct for Java 17 on your agent
    }

    stages {
        stage('Prepare') {
            agent { label 'docker-capable' }
            steps {
                checkout scm
                echo "Checkout complete."
            }
        }

        stage('Audit Tools') {
            agent { label 'docker-capable' }
            steps {
                dir('java-tomcat-sample') {
                    sh 'java -version'
                    sh 'mvn -version'
                    sh 'printenv'
                    sh 'ls -l'
                    echo "Audit tools completed successfully."
                }
            }
        }

        stage('Unit Test') {
            agent { label 'docker-capable' }
            steps {
                dir('java-tomcat-sample') {
                    sh 'mvn test -X'  // Enable Maven debug output
                    echo "Unit tests completed."
                }
            }
        }

        stage('SonarQube Analysis') {
            agent { label 'docker-capable' }
            steps {
                dir('java-tomcat-sample') {
                    script {
                        withSonarQubeEnv('SonarQube_Server') {
                            // Using 'mvn -X' for verbose output
                            sh 'mvn clean verify sonar:sonar -X'
                            echo "SonarQube analysis completed."
                        }
                    }
                }
            }
        }

        stage('Build and Package') {
            agent { label 'docker-capable' }
            steps {
                dir('java-tomcat-sample') {
                    sh 'mvn clean package -X'  // Enable Maven debug output
                    echo "Build and packaging completed."
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            deleteDir()
        }
    }
}
