pipeline {
    agent {
        label 'agent'
    }
    environment {
        SONAR_HOST_URL = 'http://174.138.63.154:9000'
        SONARQUBE_SCANNER = tool name: 'sonarqube 6.0.0', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    }
    stages {
        stage('Copy Terraform Files') {
            steps {
                sh 'mkdir -p /home/jenkins/workspace/CICD_Implementation/terraform'
                sh 'cp -r /home/jenkins/terraform-ci-cd_2024/* /home/jenkins/workspace/CICD_Implementation/terraform/'
            }
        }
        stage('Terraform Init') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                dir('terraform') {
                    sh 'terraform plan'
                }
            }
        }
        stage('Terraform Apply') {
            steps {
                dir('terraform') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Ansible Setup') {
            steps {
                dir('ansible') {
                    sh 'ansible-playbook setup.yml'
                }
            }
        }
        stage('Unit Test') {
            agent { label 'maven' }
            steps {
                dir('java-tomcat-sample') {
                    sh 'mvn test -X'
                    echo "Unit tests completed."
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('java-tomcat-sample') {
                    withSonarQubeEnv('sonarqube_token') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }
        stage('Build Artifact') {
            steps {
                dir('java-tomcat-sample') {
                    sh 'mvn package'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
        }
        stage('Prometheus Monitoring') {
            steps {
                script {
                    def response = httpRequest 'http://your-prometheus-server:9090/metrics'
                    echo "Prometheus metrics fetched"
                }
            }
        }
    }
}
