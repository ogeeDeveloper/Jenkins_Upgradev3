pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'SonarQubeServer'
        SCANNER_HOME = tool 'SonarQubeScanner'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/ogeeDeveloper/Jenkins_Upgradev3.git', branch: 'main'
            }
        }

        stage('Build') {
            steps {
                withMaven(maven: 'Maven') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=java-tomcat-sample -Dsonar.sources=src -Dsonar.java.binaries=target"
                }
            }
        }

        stage('IaC Validation') {
            steps {
                sh 'terraform init'
                sh 'terraform validate'
                sh 'terraform plan -out=tfplan'
            }
        }

        stage('OWASP ZAP Scan') {
            steps {
                sh 'docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://localhost -g gen.conf -r zap_report.html'
                archiveArtifacts artifacts: 'zap_report.html', allowEmptyArchive: true
            }
        }

        stage('Terraform Apply') {
            steps {
                sh 'terraform apply -auto-approve tfplan'
            }
        }

        stage('Deploy') {
            steps {
                sh 'docker-compose up -d'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh 'docker-compose down'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
            emailext (
                subject: "Jenkins: ${currentBuild.fullDisplayName}",
                body: "Something went wrong with ${env.BUILD_URL}",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
}
